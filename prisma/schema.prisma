generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendance {
  attendance_id Int               @id @default(autoincrement())
  course_id     Int
  student_id    Int
  status        attendance_status
  date          DateTime          @db.Date
  created_at    DateTime?         @default(now()) @db.DateTime(0)
  courses       courses           @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction, map: "attendance_ibfk_1")
  users         users             @relation(fields: [student_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "attendance_ibfk_2")

  @@index([course_id], map: "course_id")
  @@index([student_id], map: "student_id")
}

model course_time_slots {
  slot_id    Int      @id @default(autoincrement())
  course_id  Int
  day        String   @db.VarChar(20)
  start_time DateTime @db.Time(0)
  end_time   DateTime @db.Time(0)
  courses    courses  @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction, map: "course_time_slots_ibfk_1")

  @@index([course_id], map: "course_id")
}

model courses {
  course_id           Int                        @id @default(autoincrement())
  course_code         String                     @unique(map: "course_code") @db.VarChar(50)
  course_name         String                     @db.VarChar(255)
  instructor_id       Int
  email               String                     @db.VarChar(255)
  attendance_status   courses_attendance_status? @default(closed)
  seat_limit          Int
  current_enrollments Int?                       @default(0)
  created_at          DateTime?                  @default(now()) @db.DateTime(0)
  updated_at          DateTime?                  @default(now()) @db.DateTime(0)
  attendance          attendance[]
  course_time_slots   course_time_slots[]
  users               users                      @relation(fields: [instructor_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "courses_ibfk_1")
  enrollments         enrollments[]

  @@index([instructor_id], map: "instructor_id")
}

model enrollments {
  enrollment_id Int       @id @default(autoincrement())
  course_id     Int
  student_id    Int
  deleted_at    DateTime? @db.DateTime(0)
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @default(now()) @db.DateTime(0)
  courses       courses   @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction, map: "enrollments_ibfk_1")
  users         users     @relation(fields: [student_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "enrollments_ibfk_2")

  @@index([course_id], map: "course_id")
  @@index([student_id], map: "student_id")
}

model roles {
  role_id    Int          @id @default(autoincrement())
  role_name  String       @unique(map: "role_name") @db.VarChar(50)
  user_roles user_roles[]
}

model user_roles {
  user_id Int
  role_id Int
  users   users @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_ibfk_1")
  roles   roles @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_ibfk_2")

  @@id([user_id, role_id])
  @@index([role_id], map: "role_id")
}

model users {
  user_id     Int           @id @default(autoincrement())
  username    String        @unique(map: "username") @db.VarChar(100)
  email       String        @unique(map: "email") @db.VarChar(255)
  password    String        @db.VarChar(255)
  first_name  String        @db.VarChar(100)
  last_name   String        @db.VarChar(100)
  department  String?       @db.VarChar(100)
  deleted_at  DateTime?     @db.DateTime(0)
  created_at  DateTime?     @default(now()) @db.DateTime(0)
  updated_at  DateTime?     @default(now()) @db.DateTime(0)
  attendance  attendance[]
  courses     courses[]
  enrollments enrollments[]
  user_roles  user_roles[]
}

enum attendance_status {
  present
  absent
}

enum courses_attendance_status {
  open
  closed
}
