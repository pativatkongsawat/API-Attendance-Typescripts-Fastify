generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendances {
  id          Int                @id @default(autoincrement())
  course_code String             @db.VarChar(20)
  user_id     String             @db.VarChar(20)
  status      attendances_status
  date        DateTime?          @db.Date
}

model course_time_slots {
  id          Int      @id @default(autoincrement())
  course_code String   @db.VarChar(20)
  day         String   @db.VarChar(20)
  start_time  DateTime @db.Time(0)
  end_time    DateTime @db.Time(0)
  courses     courses  @relation(fields: [course_code], references: [course_code], onDelete: Cascade, onUpdate: NoAction, map: "course_time_slots_ibfk_1")

  @@index([course_code], map: "course_code")
}

model courses {
  id                  Int                        @id @default(autoincrement())
  course_code         String                     @unique(map: "course_code") @db.VarChar(20)
  course_name         String                     @db.VarChar(255)
  instructor_user_id  String                     @db.VarChar(20)
  attendance_status   courses_attendance_status? @default(closed)
  seat_limit          Int
  current_enrollments Int?                       @default(0)
  created_at          DateTime?                  @default(now()) @db.DateTime(0)
  course_time_slots   course_time_slots[]
}

model enrollments {
  id          Int       @id @default(autoincrement())
  course_code String    @db.VarChar(20)
  user_id     String    @db.VarChar(20)
  deleted_at  DateTime? @db.DateTime(0)
  created_at  DateTime? @default(now()) @db.DateTime(0)
}

model roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique(map: "name") @db.VarChar(50)
  users users[]
}

model users {
  id         Int       @id @default(autoincrement())
  user_id    String    @unique(map: "user_id") @db.VarChar(20)
  first_name String    @db.VarChar(100)
  last_name  String    @db.VarChar(100)
  email      String    @unique(map: "email") @db.VarChar(100)
  password   String    @db.VarChar(255)
  department String?   @db.VarChar(100)
  role_id    Int
  deleted_at DateTime? @db.DateTime(0)
  created_at DateTime? @default(now()) @db.DateTime(0)
  roles      roles     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")

  @@index([role_id], map: "role_id")
}

enum attendances_status {
  present
  absent
  late
}

enum courses_attendance_status {
  open
  closed
}
